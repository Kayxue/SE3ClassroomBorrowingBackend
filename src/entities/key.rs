//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.17

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use utoipa::ToSchema;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, ToSchema)]
#[sea_orm(table_name = "key")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub classroom_id: Option<String>,
    #[sea_orm(column_type = "Text", unique)]
    pub key_number: String,
    pub is_active: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::classroom::Entity",
        from = "Column::ClassroomId",
        to = "super::classroom::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Classroom,
    #[sea_orm(has_many = "super::key_transaction_log::Entity")]
    KeyTransactionLog,
}

impl Related<super::classroom::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Classroom.def()
    }
}

impl Related<super::key_transaction_log::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::KeyTransactionLog.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
